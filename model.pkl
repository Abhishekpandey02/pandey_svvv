{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5f27d51f-b9eb-44cb-bba9-ca82ebf1af48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n",
      "Accuracy: 80.44692737430168 %\n",
      "Accuracy: 63.128491620111724 %\n",
      "Accuracy: 83.79888268156425 %\n",
      "Accuracy: 77.6536312849162 %\n",
      "Accuracy: 81.56424581005587 %\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import xgboost as xgb\n",
    "df = pd.read_csv(\"F:\\\\titanic.csv\")\n",
    "df.head()\n",
    "df.info()\n",
    "df.isnull().sum()\n",
    "df.drop([\"Cabin\"],axis=1,inplace=True)\n",
    "df['Age'] = df['Age'].fillna(df['Age'].mean())\n",
    "df.isnull().sum()\n",
    "df['Embarked'].value_counts()\n",
    "df[\"Embarked\"].fillna(\"S\")\n",
    "df.isnull().sum()\n",
    "df['Age'] = df['Age'].astype(int)\n",
    "def winker(col):\n",
    "  q1=df[col].quantile(.25)\n",
    "  q3=df[col].quantile(.75)\n",
    "  iqr=q3-q1\n",
    "  uw=q3+1.5*iqr\n",
    "  lw=q1-1.5*iqr\n",
    "  return lw,uw\n",
    "for i in ['Age','Parch','SibSp','Fare']:\n",
    "  lw,uw=winker(i)\n",
    "  df[i]=np.where(df[i]<lw,lw,df[i])\n",
    "  df[i]=np.where(df[i]>uw,uw,df[i])\n",
    "sns.boxplot(df['Age'])\n",
    "sns.boxplot(df['Parch'])\n",
    "sns.boxplot(df['Fare'])\n",
    "sns.boxplot(df['SibSp'])\n",
    "df.isnull().sum()\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "le = LabelEncoder()\n",
    "df['Sex'] = le.fit_transform(df['Sex'])\n",
    "df['Embarked'] = le.fit_transform(df['Embarked'])\n",
    "df['Name'] = le.fit_transform(df['Name'])\n",
    "df['Ticket'] = le.fit_transform(df['Ticket'])\n",
    "for column in df.select_dtypes(include=['float']):\n",
    "  df[column] = df[column].astype(int)\n",
    "from sklearn.model_selection import train_test_split\n",
    "X = df.drop('Survived', axis=1)\n",
    "y = df['Survived']\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "from sklearn.linear_model import LinearRegression\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "from sklearn.metrics import accuracy_score\n",
    "y_pred = model.predict(X_test)\n",
    "y_pred = [1 if val >= 0.5 else 0 for val in y_pred]\n",
    "accuracy = accuracy_score(y_test, y_pred) * 100\n",
    "print(\"Accuracy:\", accuracy, \"%\")\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "knn = KNeighborsClassifier(n_neighbors=5)\n",
    "knn.fit(X_train, y_train)\n",
    "y_pred = knn.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred) * 100\n",
    "print(\"Accuracy:\", accuracy, \"%\")\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "rf.fit(X_train, y_train)\n",
    "y_pred = rf.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred) * 100\n",
    "print(\"Accuracy:\", accuracy, \"%\")\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "dt = DecisionTreeClassifier(random_state=42)\n",
    "dt.fit(X_train, y_train)\n",
    "y_pred = dt.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred) * 100\n",
    "print(\"Accuracy:\", accuracy, \"%\")\n",
    "from xgboost import XGBClassifier\n",
    "xgb = XGBClassifier(random_state=42)\n",
    "xgb.fit(X_train, y_train)\n",
    "y_pred = xgb.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred) * 100\n",
    "print(\"Accuracy:\", accuracy, \"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "195debb1-d14e-4dcb-b354-9290abfd6835",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
